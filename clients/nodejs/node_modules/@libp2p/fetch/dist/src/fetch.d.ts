import type { Fetch as FetchInterface, FetchComponents, FetchInit, LookupFunction } from './index.js';
import type { AbortOptions, PeerId, Startable, IncomingStreamData } from '@libp2p/interface';
/**
 * A simple libp2p protocol for requesting a value corresponding to a key from a peer.
 * Developers can register one or more lookup function for retrieving the value corresponding to
 * a given key.  Each lookup function must act on a distinct part of the overall key space, defined
 * by a fixed prefix that all keys that should be routed to that lookup function will start with.
 */
export declare class Fetch implements Startable, FetchInterface {
    readonly protocol: string;
    private readonly components;
    private readonly lookupFunctions;
    private started;
    private readonly init;
    private readonly log;
    constructor(components: FetchComponents, init?: FetchInit);
    readonly [Symbol.toStringTag] = "@libp2p/fetch";
    start(): Promise<void>;
    stop(): Promise<void>;
    isStarted(): boolean;
    /**
     * Sends a request to fetch the value associated with the given key from the given peer
     */
    fetch(peer: PeerId, key: string | Uint8Array, options?: AbortOptions): Promise<Uint8Array | undefined>;
    /**
     * Invoked when a fetch request is received.  Reads the request message off the given stream and
     * responds based on looking up the key in the request via the lookup callback that corresponds
     * to the key's prefix.
     */
    handleMessage(data: IncomingStreamData): Promise<void>;
    /**
     * Given a key, finds the appropriate function for looking up its corresponding value, based on
     * the key's prefix.
     */
    _getLookupFunction(key: string): {
        fn: LookupFunction;
        prefix: string;
    } | undefined;
    /**
     * Registers a new lookup callback that can map keys to values, for a given set of keys that
     * share the same prefix
     *
     * @example
     *
     * ```TypeScript
     * // ...
     * libp2p.fetchService.registerLookupFunction('/prefix', (key) => { ... })
     * ```
     */
    registerLookupFunction(prefix: string, lookup: LookupFunction): void;
    /**
     * Registers a new lookup callback that can map keys to values, for a given set of keys that
     * share the same prefix.
     *
     * @example
     *
     * ```TypeScript
     * // ...
     * libp2p.fetchService.unregisterLookupFunction('/prefix')
     * ```
     */
    unregisterLookupFunction(prefix: string, lookup?: LookupFunction): void;
}
//# sourceMappingURL=fetch.d.ts.map