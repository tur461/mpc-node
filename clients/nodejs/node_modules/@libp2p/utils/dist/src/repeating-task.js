import { setMaxListeners } from '@libp2p/interface';
import { anySignal } from 'any-signal';
export function repeatingTask(fn, interval, options) {
    let timeout;
    let shutdownController;
    function runTask() {
        const opts = {
            signal: shutdownController.signal
        };
        if (options?.timeout != null) {
            const signal = anySignal([shutdownController.signal, AbortSignal.timeout(options.timeout)]);
            setMaxListeners(Infinity, signal);
            opts.signal = signal;
        }
        Promise.resolve().then(async () => {
            await fn(opts);
        })
            .catch(() => { })
            .finally(() => {
            if (shutdownController.signal.aborted) {
                // task has been cancelled, bail
                return;
            }
            // reschedule
            timeout = setTimeout(runTask, interval);
        });
    }
    let started = false;
    return {
        setInterval: (ms) => {
            interval = ms;
            // maybe reschedule
            if (timeout != null) {
                clearTimeout(timeout);
                timeout = setTimeout(runTask, interval);
            }
        },
        setTimeout: (ms) => {
            if (options == null) {
                options = {};
            }
            options.timeout = ms;
        },
        start: () => {
            if (started) {
                return;
            }
            started = true;
            shutdownController = new AbortController();
            setMaxListeners(Infinity, shutdownController.signal);
            // run now
            if (options?.runImmediately === true) {
                queueMicrotask(() => {
                    runTask();
                });
            }
            else {
                // run later
                timeout = setTimeout(runTask, interval);
            }
        },
        stop: () => {
            clearTimeout(timeout);
            shutdownController?.abort();
            started = false;
        }
    };
}
//# sourceMappingURL=repeating-task.js.map